"""
Migration: ‡πÄ‡∏û‡∏¥‡πà‡∏° column status ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á questions
‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine, text
from database import DATABASE_URL

def migrate():
    engine = create_engine(DATABASE_URL)
    
    with engine.connect() as conn:
        # 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° column status
        try:
            conn.execute(text("""
                ALTER TABLE questions 
                ADD COLUMN status VARCHAR(20) NOT NULL DEFAULT '‡∏Ç‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏¢'
            """))
            conn.commit()
            print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° column 'status' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            if "Duplicate column name" in str(e):
                print("‚ö†Ô∏è  Column 'status' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            else:
                print(f"‚ùå Error adding column: {e}")
                raise
        
        # 2. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        try:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ
            conn.execute(text("""
                UPDATE questions q
                SET status = '‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
                WHERE EXISTS (
                    SELECT 1 FROM solutions s
                    WHERE s.question_id = q.id
                    AND EXISTS (
                        SELECT 1 FROM solution_images si
                        WHERE si.solution_id = s.id
                    )
                )
            """))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏Ç‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ
            conn.execute(text("""
                UPDATE questions q
                SET status = '‡∏Ç‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥'
                WHERE EXISTS (
                    SELECT 1 FROM solutions s
                    WHERE s.question_id = q.id
                )
                AND NOT EXISTS (
                    SELECT 1 FROM solutions s
                    WHERE s.question_id = q.id
                    AND EXISTS (
                        SELECT 1 FROM solution_images si
                        WHERE si.solution_id = s.id
                    )
                )
            """))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏Ç‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏¢' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢‡πÄ‡∏•‡∏¢
            conn.execute(text("""
                UPDATE questions q
                SET status = '‡∏Ç‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏¢'
                WHERE NOT EXISTS (
                    SELECT 1 FROM solutions s
                    WHERE s.question_id = q.id
                )
            """))
            
            conn.commit()
            print("‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
            result = conn.execute(text("""
                SELECT status, COUNT(*) as count
                FROM questions
                GROUP BY status
            """))
            
            print("\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏à‡∏ó‡∏¢‡πå:")
            for row in result:
                print(f"  - {row.status}: {row.count} ‡πÇ‡∏à‡∏ó‡∏¢‡πå")
                
        except Exception as e:
            print(f"‚ùå Error updating status: {e}")
            raise

if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° migration: add_status_to_questions")
    migrate()
    print("‚úÖ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
