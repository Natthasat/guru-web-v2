from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

# Database URL - MySQL connection to guru_DB
# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç username ‡πÅ‡∏•‡∏∞ password ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö MySQL server ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "mysql+pymysql://username:password@localhost:3306/guru_DB"
DATABASE_URL = "mysql+pymysql://root:@localhost:3306/guru_DB"

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ MySQL ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SQLite ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
# DATABASE_URL = "sqlite:///./guru_web.db"

# Create engine with better error handling
try:
    engine = create_engine(DATABASE_URL, pool_pre_ping=True)
    # Test connection more thoroughly
    with engine.connect() as conn:
        result = conn.execute(text("SELECT 1"))
        result.fetchone()
    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL guru_DB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL: {e}")
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ SQLite ‡πÅ‡∏ó‡∏ô...")
    DATABASE_URL = "sqlite:///./guru_web.db"
    engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
    print("‚úÖ ‡πÉ‡∏ä‡πâ SQLite ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤")

# Create SessionLocal class
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create Base class
Base = declarative_base()

# Dependency to get database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()