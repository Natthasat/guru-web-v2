"""
Migration Script: ‡∏à‡∏≤‡∏Å 1:1 ‡πÄ‡∏õ‡πá‡∏ô Many-to-Many
‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
"""
from sqlalchemy import create_engine, text
from database import DATABASE_URL

def migrate():
    engine = create_engine(DATABASE_URL)
    
    with engine.connect() as conn:
        print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Migration...")
        
        # 1. ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á solutions
        print("üì¶ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...")
        conn.execute(text("""
            CREATE TABLE IF NOT EXISTS solutions_backup AS 
            SELECT * FROM solutions
        """))
        conn.commit()
        
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        print("üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...")
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á solutions ‡πÉ‡∏´‡∏°‡πà
        conn.execute(text("""
            CREATE TABLE IF NOT EXISTS solutions_new (
                id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(255),
                answer_text TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_solution_id (id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """))
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á solution_images
        conn.execute(text("""
            CREATE TABLE IF NOT EXISTS solution_images (
                id INT AUTO_INCREMENT PRIMARY KEY,
                solution_id INT NOT NULL,
                image_path VARCHAR(255) NOT NULL,
                image_order INT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (solution_id) REFERENCES solutions_new(id) ON DELETE CASCADE,
                INDEX idx_solution_id (solution_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """))
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á question_solutions (mapping)
        conn.execute(text("""
            CREATE TABLE IF NOT EXISTS question_solutions (
                id INT AUTO_INCREMENT PRIMARY KEY,
                question_id INT NOT NULL,
                solution_id INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE,
                FOREIGN KEY (solution_id) REFERENCES solutions_new(id) ON DELETE CASCADE,
                UNIQUE KEY unique_question_solution (question_id, solution_id),
                INDEX idx_question_id (question_id),
                INDEX idx_solution_id (solution_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """))
        conn.commit()
        
        # 3. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        print("üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        old_solutions = conn.execute(text("SELECT * FROM solutions_backup")).fetchall()
        
        for old_sol in old_solutions:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏•‡∏¢‡πÉ‡∏´‡∏°‡πà
            result = conn.execute(text("""
                INSERT INTO solutions_new (answer_text, created_at)
                VALUES (:answer_text, :created_at)
            """), {
                "answer_text": old_sol.answer_text,
                "created_at": old_sol.created_at
            })
            conn.commit()
            
            new_solution_id = result.lastrowid
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if old_sol.answer_img:
                conn.execute(text("""
                    INSERT INTO solution_images (solution_id, image_path, image_order)
                    VALUES (:solution_id, :image_path, 0)
                """), {
                    "solution_id": new_solution_id,
                    "image_path": old_sol.answer_img
                })
                conn.commit()
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° question ‡∏Å‡∏±‡∏ö solution
            conn.execute(text("""
                INSERT INTO question_solutions (question_id, solution_id)
                VALUES (:question_id, :solution_id)
            """), {
                "question_id": old_sol.question_id,
                "solution_id": new_solution_id
            })
            conn.commit()
        
        # 4. ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        print("üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤...")
        conn.execute(text("SET FOREIGN_KEY_CHECKS = 0"))
        conn.execute(text("DROP TABLE IF EXISTS solutions"))
        conn.execute(text("SET FOREIGN_KEY_CHECKS = 1"))
        conn.commit()
        
        print("‚ú® ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á...")
        conn.execute(text("RENAME TABLE solutions_new TO solutions"))
        conn.commit()
        
        print("‚úÖ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ:")
        print(f"   - ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏â‡∏•‡∏¢: {len(old_solutions)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print("   - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà: solutions, solution_images, question_solutions")
        print("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô: solutions_backup")

if __name__ == "__main__":
    try:
        migrate()
    except Exception as e:
        print(f"‚ùå Error: {e}")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
