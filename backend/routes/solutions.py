from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Form, Query
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import or_
from typing import List, Optional
from pydantic import BaseModel
from datetime import datetime
from database import get_db
from models import Solution, SolutionImage, Question
from status_helper import update_question_status
import os
import uuid
from pathlib import Path

router = APIRouter()

# ==================== Helper Functions ====================

def find_question_by_any_book_id(
    db: Session, 
    book_id: str, 
    page: int, 
    question_no: int
) -> Optional[Question]:
    """
    ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (book_id) ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (old_book_id)
    
    Args:
        db (Session): SQLAlchemy database session
        book_id (str): ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ)
        page (int): ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
        question_no (int): ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà
    
    Returns:
        Optional[Question]: Question object ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö, None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
    
    Example:
        >>> question = find_question_by_any_book_id(db, "IPL5203-1051", 5, 2)
        >>> question = find_question_by_any_book_id(db, "1710-0141", 5, 2)  # ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ
    """
    return db.query(Question).filter(
        or_(
            Question.book_id == book_id,
            Question.old_book_id == book_id
        ),
        Question.page == page,
        Question.question_no == question_no
    ).first()

# Pydantic schemas
class SolutionImageResponse(BaseModel):
    id: int
    image_path: str
    image_order: int
    
    class Config:
        from_attributes = True

class SolutionResponse(BaseModel):
    id: int
    question_id: int
    title: Optional[str] = None
    teacher_name: Optional[str] = None
    answer_text: Optional[str] = None
    created_at: datetime
    images: List[SolutionImageResponse] = []
    
    class Config:
        from_attributes = True

# ==================== Solution CRUD ====================

@router.post("/questions/{question_id}/solutions")
async def create_solution_for_question(
    question_id: int,
    title: str = Form(None),
    teacher_name: str = Form(None),
    answer_text: str = Form(""),
    db: Session = Depends(get_db)
):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏•‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå (One-to-Many: 1 ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏¢)
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    question = db.query(Question).filter(Question.id == question_id).first()
    if not question:
        raise HTTPException(status_code=404, detail="Question not found")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏•‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå
    new_solution = Solution(
        question_id=question_id,
        title=title if title else None,
        teacher_name=teacher_name if teacher_name and teacher_name.strip() else None,
        answer_text=answer_text if answer_text.strip() else None
    )
    db.add(new_solution)
    db.commit()
    db.refresh(new_solution)
    
    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏à‡∏ó‡∏¢‡πå
    update_question_status(db, question_id)
    
    return {
        "id": new_solution.id,
        "question_id": new_solution.question_id,
        "title": new_solution.title,
        "answer_text": new_solution.answer_text,
        "created_at": new_solution.created_at.isoformat() if new_solution.created_at else None,
        "images": []
    }

@router.post("/solutions/{solution_id}/images")
async def upload_solution_images(
    solution_id: int,
    images: List[UploadFile] = File(default=[]),
    copied_image_paths: List[str] = Form(default=[]),
    page: int = Form(None),
    question_no: int = Form(None),
    solution_index: int = Form(None),
    db: Session = Depends(get_db)
):
    """
    ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ)
    ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {book_id}_{page}_{question_no}_Answer{solution_index}_{image_counter}.ext
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏¢‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    solution = db.query(Solution).filter(Solution.id == solution_id).first()
    if not solution:
        raise HTTPException(status_code=404, detail="Solution not found")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ book_id ‡πÅ‡∏•‡∏∞ question_no
    question = db.query(Question).filter(Question.id == solution.question_id).first()
    if not question:
        raise HTTPException(status_code=404, detail="Question not found")
    
    # ‡πÉ‡∏ä‡πâ page, question_no ‡πÅ‡∏•‡∏∞ solution_index ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å frontend
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å database
    if page is None:
        page = question.page
    
    if question_no is None:
        question_no = question.question_no
    
    if solution_index is None:
        # Query ‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö (fallback)
        db.commit()
        db.refresh(solution)
        db.refresh(question)
        all_solutions = db.query(Solution).filter(
            Solution.question_id == question.id
        ).order_by(Solution.id).all()
        solution_index = next((i + 1 for i, s in enumerate(all_solutions) if s.id == solution_id), 1)
    
    print(f"üìä Debug: Book ID={question.book_id}, Page={page}, Question No={question_no}, Solution Index={solution_index}")
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÄ‡∏â‡∏•‡∏¢‡∏ô‡∏µ‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image_order)
    initial_image_count = db.query(SolutionImage).filter(
        SolutionImage.solution_id == solution_id
    ).count()
    
    uploaded_images = []
    # ‡πÉ‡∏ä‡πâ path relative ‡∏à‡∏≤‡∏Å backend/ directory
    uploads_dir = Path(__file__).parent.parent / "uploads"
    uploads_dir.mkdir(exist_ok=True)
    
    # ‡πÉ‡∏ä‡πâ counter ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏£‡∏π‡∏õ
    image_counter = 1
    
    # 1. Copy ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤ (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô server)
    import shutil
    for copied_path in copied_image_paths:
        try:
            source_file = Path(__file__).parent.parent / copied_path
            if not source_file.exists():
                print(f"‚ö†Ô∏è  ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö: {copied_path}")
                continue
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà copy
            file_extension = source_file.suffix
            safe_book_id = question.book_id.replace('/', '-').replace('\\', '-').replace(':', '-')
            file_uuid = str(uuid.uuid4())[:8]
            unique_filename = f"{safe_book_id}_{page}_{question_no}_Answer{solution_index}_{image_counter}_{file_uuid}{file_extension}"
            dest_file = uploads_dir / unique_filename
            
            # Copy file
            shutil.copy2(source_file, dest_file)
            print(f"üìã Copied: {copied_path} -> {unique_filename}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database
            solution_image = SolutionImage(
                solution_id=solution_id,
                image_path=f"uploads/{unique_filename}",
                image_order=initial_image_count + image_counter
            )
            db.add(solution_image)
            uploaded_images.append(solution_image)
            image_counter += 1
            
        except Exception as e:
            print(f"‚ùå Error copying image {copied_path}: {e}")
            continue
    
    # 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà user ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    
    for idx, image in enumerate(images):
        if not image.filename:
            continue
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        allowed_extensions = {'.jpg', '.jpeg', '.png', '.gif'}
        file_extension = Path(image.filename).suffix.lower()
        if file_extension not in allowed_extensions:
            raise HTTPException(
                status_code=400, 
                detail=f"Invalid file type: {image.filename}. Only JPG, PNG, GIF allowed."
            )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: {book_id}_{page}_{question_no}_Answer{solution_index}_{image_counter}_{uuid}.ext
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° UUID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥
        safe_book_id = question.book_id.replace('/', '-').replace('\\', '-').replace(':', '-')
        file_uuid = str(uuid.uuid4())[:8]  # ‡πÉ‡∏ä‡πâ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á UUID
        unique_filename = f"{safe_book_id}_{page}_{question_no}_Answer{solution_index}_{image_counter}_{file_uuid}{file_extension}"
        file_path = uploads_dir / unique_filename
        
        print(f"üì∏ Saving: {unique_filename} (‡∏´‡∏ô‡πâ‡∏≤ {page}, ‡∏Ç‡πâ‡∏≠ {question_no}, ‡πÄ‡∏â‡∏•‡∏¢ {solution_index}, ‡∏£‡∏π‡∏õ {image_counter}, UUID: {file_uuid})")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        try:
            with open(file_path, "wb") as buffer:
                content = await image.read()
                buffer.write(content)
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Failed to save file: {str(e)}")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        solution_image = SolutionImage(
            solution_id=solution_id,
            image_path=f"uploads/{unique_filename}",
            image_order=initial_image_count + idx
        )
        db.add(solution_image)
        uploaded_images.append({
            "filename": unique_filename,
            "path": f"uploads/{unique_filename}",
            "order": initial_image_count + idx
        })
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° counter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        image_counter += 1
    
    db.commit()
    
    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
    update_question_status(db, solution.question_id)
    
    return {
        "message": f"Uploaded {len(uploaded_images)} image(s) successfully",
        "images": uploaded_images
    }

@router.get("/solutions")
async def get_all_solutions(db: Session = Depends(get_db)):
    """
    ‡∏î‡∏π‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏à‡∏ó‡∏¢‡πå)
    """
    solutions = db.query(Solution).options(
        joinedload(Solution.images),
        joinedload(Solution.question)
    ).all()
    
    result = []
    for solution in solutions:
        result.append({
            "id": solution.id,
            "question_id": solution.question_id,
            "title": solution.title,
            "teacher_name": solution.teacher_name,
            "answer_text": solution.answer_text,
            "created_at": solution.created_at.isoformat() if solution.created_at else None,
            "question": {
                "id": solution.question.id,
                "book_id": solution.question.book_id,
                "page": solution.question.page,
                "question_no": solution.question.question_no,
            } if solution.question else None,
            "images": [
                {
                    "id": img.id,
                    "image_path": img.image_path,
                    "image_order": img.image_order
                }
                for img in solution.images
            ]
        })
    
    return result

@router.get("/solutions/list")
async def list_all_solutions(
    page: int = Query(1, ge=1, description="‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"),
    limit: int = Query(10, ge=1, le=100, description="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤"),
    db: Session = Depends(get_db)
):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
    - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    """
    from sqlalchemy.orm import joinedload
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    total = db.query(Solution).filter(
        Solution.answer_text.isnot(None),
        Solution.answer_text != ''
    ).count()
    
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏•‡∏¢‡∏ï‡∏≤‡∏° pagination ‡∏û‡∏£‡πâ‡∏≠‡∏° eager load images
    skip = (page - 1) * limit
    solutions = db.query(Solution).options(
        joinedload(Solution.images)
    ).filter(
        Solution.answer_text.isnot(None),
        Solution.answer_text != ''
    ).order_by(Solution.id.desc()).offset(skip).limit(limit).all()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á response
    results = []
    for solution in solutions:
        images_list = [
            {
                'id': img.id,
                'image_path': img.image_path,
                'image_order': img.image_order
            } for img in solution.images
        ]
        
        results.append({
            'id': solution.id,
            'title': solution.title,
            'answer_text': solution.answer_text,
            'teacher_name': solution.teacher_name,
            'question_id': solution.question_id,
            'usage_count': 1,
            'images': images_list
        })
    
    return {
        'solutions': results,
        'total': total,
        'page': page,
        'limit': limit,
        'total_pages': (total + limit - 1) // limit
    }

@router.get("/solutions/{solution_id}")
async def get_solution_by_id(solution_id: int, db: Session = Depends(get_db)):
    """
    ‡∏î‡∏π‡πÄ‡∏â‡∏•‡∏¢‡∏ï‡∏≤‡∏° ID (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
    """
    solution = db.query(Solution).options(joinedload(Solution.images)).filter(
        Solution.id == solution_id
    ).first()
    
    if not solution:
        raise HTTPException(status_code=404, detail="Solution not found")
    
    return {
        "id": solution.id,
        "question_id": solution.question_id,
        "title": solution.title,
        "teacher_name": solution.teacher_name,
        "answer_text": solution.answer_text,
        "created_at": solution.created_at.isoformat() if solution.created_at else None,
        "images": [
            {
                "id": img.id,
                "image_path": img.image_path,
                "image_order": img.image_order
            }
            for img in solution.images
        ]
    }

@router.put("/solutions/{solution_id}")
async def update_solution(
    solution_id: int,
    title: str = Form(None),
    teacher_name: str = Form(None),
    answer_text: str = Form(""),
    db: Session = Depends(get_db)
):
    """
    ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏•‡∏¢
    """
    solution = db.query(Solution).filter(Solution.id == solution_id).first()
    if not solution:
        raise HTTPException(status_code=404, detail="Solution not found")
    
    solution.title = title if title else None
    solution.teacher_name = teacher_name if teacher_name and teacher_name.strip() else None
    solution.answer_text = answer_text if answer_text.strip() else None
    
    db.commit()
    db.refresh(solution)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢
    solution = db.query(Solution).options(joinedload(Solution.images)).filter(
        Solution.id == solution_id
    ).first()
    
    return {
        "id": solution.id,
        "question_id": solution.question_id,
        "title": solution.title,
        "teacher_name": solution.teacher_name,
        "answer_text": solution.answer_text,
        "created_at": solution.created_at.isoformat() if solution.created_at else None,
        "images": [
            {
                "id": img.id,
                "image_path": img.image_path,
                "image_order": img.image_order
            }
            for img in solution.images
        ]
    }

@router.delete("/solutions/{solution_id}")
async def delete_solution(solution_id: int, db: Session = Depends(get_db)):
    """
    ‡∏•‡∏ö‡πÄ‡∏â‡∏•‡∏¢ (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ CASCADE)
    """
    solution = db.query(Solution).filter(Solution.id == solution_id).first()
    if not solution:
        raise HTTPException(status_code=404, detail="Solution not found")
    
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    for image in solution.images:
        # image.image_path = "uploads/xxx.png"
        image_path = Path(__file__).parent.parent / image.image_path
        if image_path.exists():
            image_path.unlink()
    
    db.delete(solution)
    db.commit()
    
    return {"message": "Solution deleted successfully"}

@router.delete("/solutions/{solution_id}/images/{image_id}")
async def delete_solution_image(
    solution_id: int, 
    image_id: int, 
    db: Session = Depends(get_db)
):
    """
    ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ
    """
    image = db.query(SolutionImage).filter(
        SolutionImage.id == image_id,
        SolutionImage.solution_id == solution_id
    ).first()
    
    if not image:
        raise HTTPException(status_code=404, detail="Image not found")
    
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
    # image.image_path = "uploads/xxx.png"
    image_path = Path(__file__).parent.parent / image.image_path
    if image_path.exists():
        image_path.unlink()
    
    db.delete(image)
    db.commit()
    
    return {"message": "Image deleted successfully"}

# ==================== Query Solutions for Question ====================

@router.get("/questions/{question_id}/solutions")
async def get_solutions_for_question(question_id: int, db: Session = Depends(get_db)):
    """
    ‡∏î‡∏π‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå (One-to-Many)
    """
    question = db.query(Question).filter(Question.id == question_id).first()
    if not question:
        raise HTTPException(status_code=404, detail="Question not found")
    
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ô‡∏µ‡πâ
    solutions = db.query(Solution).options(joinedload(Solution.images)).filter(
        Solution.question_id == question_id
    ).all()
    
    result = []
    for solution in solutions:
        result.append({
            "id": solution.id,
            "title": solution.title,
            "answer_text": solution.answer_text,
            "created_at": solution.created_at.isoformat() if solution.created_at else None,
            "images": [
                {
                    "id": img.id,
                    "image_path": img.image_path,
                    "image_order": img.image_order
                }
                for img in sorted(solution.images, key=lambda x: x.image_order)
            ]
        })
    
    return result

# ==================== Combined Query ====================

@router.get("/qa/{book_id}/{page}/{question_no}")
async def get_question_with_solutions(
    book_id: str, 
    page: int, 
    question_no: int, 
    db: Session = Depends(get_db)
):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå + ‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (One-to-Many)
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (book_id) ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (old_book_id)
    """
    # ‡∏´‡∏≤‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ reusable function
    question = find_question_by_any_book_id(db, book_id, page, question_no)
    
    if not question:
        raise HTTPException(status_code=404, detail="Question not found")
    
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ô‡∏µ‡πâ
    solutions = db.query(Solution).options(joinedload(Solution.images)).filter(
        Solution.question_id == question.id
    ).all()
    
    solution_list = []
    for solution in solutions:
        solution_list.append({
            "id": solution.id,
            "title": solution.title,
            "answer_text": solution.answer_text,
            "teacher_name": solution.teacher_name,
            "created_at": solution.created_at.isoformat() if solution.created_at else None,
            "images": [
                {
                    "id": img.id,
                    "image_path": img.image_path,
                    "image_order": img.image_order
                }
                for img in sorted(solution.images, key=lambda x: x.image_order)
            ]
        })
    
    return {
        "question": {
            "id": question.id,
            "book_id": question.book_id,
            "old_book_id": question.old_book_id,
            "page": question.page,
            "question_no": question.question_no,
            "question_text": question.question_text,
            "question_img": question.question_img,
            "created_at": question.created_at.isoformat() if question.created_at else None
        },
        "solutions": solution_list
    }
