"""
Fix question_solutions table - ‡πÄ‡∏û‡∏¥‡πà‡∏° id column
"""
from sqlalchemy import create_engine, text
from database import DATABASE_URL

def fix_table():
    engine = create_engine(DATABASE_URL)
    
    with engine.connect() as conn:
        print("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á question_solutions...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
            print("üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°...")
            result = conn.execute(text("DESCRIBE question_solutions"))
            columns = [row[0] for row in result.fetchall()]
            print(f"   ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: {columns}")
            
            if 'id' in columns:
                print("‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á question_solutions ‡∏°‡∏µ id ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
                return
            
            # Backup ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
            print("üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...")
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS question_solutions_backup AS 
                SELECT * FROM question_solutions
            """))
            conn.commit()
            
            # ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤
            print("üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤...")
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 0"))
            conn.execute(text("DROP TABLE IF EXISTS question_solutions"))
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 1"))
            conn.commit()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ id
            print("üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...")
            conn.execute(text("""
                CREATE TABLE question_solutions (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    question_id INT NOT NULL,
                    solution_id INT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE,
                    FOREIGN KEY (solution_id) REFERENCES solutions(id) ON DELETE CASCADE,
                    UNIQUE KEY unique_question_solution (question_id, solution_id),
                    INDEX idx_question_id (question_id),
                    INDEX idx_solution_id (solution_id)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """))
            conn.commit()
            
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            print("üì• ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...")
            result = conn.execute(text("SELECT COUNT(*) as count FROM question_solutions_backup"))
            count = result.fetchone()[0]
            
            if count > 0:
                conn.execute(text("""
                    INSERT INTO question_solutions (question_id, solution_id, created_at)
                    SELECT question_id, solution_id, created_at 
                    FROM question_solutions_backup
                """))
                conn.commit()
                print(f"   ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                print("   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤")
            
            print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
            print("üìä ‡∏™‡∏£‡∏∏‡∏õ:")
            print("   - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå id ‡πÅ‡∏ö‡∏ö AUTO_INCREMENT")
            print("   - ‡∏™‡∏£‡πâ‡∏≤‡∏á FOREIGN KEY constraints")
            print("   - ‡∏™‡∏£‡πâ‡∏≤‡∏á UNIQUE constraint")
            print("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô: question_solutions_backup")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            raise

if __name__ == "__main__":
    try:
        fix_table()
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
